<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~     ___                  _   ____  ____
  ~    / _ \ _   _  ___  ___| |_|  _ \| __ )
  ~   | | | | | | |/ _ \/ __| __| | | |  _ \
  ~   | |_| | |_| |  __/\__ \ |_| |_| | |_) |
  ~    \__\_\\__,_|\___||___/\__|____/|____/
  ~
  ~  Copyright (c) 2014-2019 Appsicle
  ~  Copyright (c) 2019-2023 QuestDB
  ~
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~  http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  ~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.questdb</groupId>
    <artifactId>rust-maven-example</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>Rust Maven Plugin Usage Example</name>
    <description>A Java command line tool with a string reverse function written in Rust bridged over JNI.</description>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.questdb</groupId>
            <artifactId>rust-maven-plugin</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>io.questdb</groupId>
            <artifactId>jar-jni</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--
                The Rust Maven Plugin
                Here it'll build the `str-reverse` crate and place the cdylib in a subdirectory of the "resources" dir.
                The binary will be auto-bundled into the final jar.
                Make sure to configure your `.gitignore` appropriately (See rust-maven-example/.gitignore).
            -->
            <plugin>
                <groupId>io.questdb</groupId>
                <artifactId>rust-maven-plugin</artifactId>
                <version>${project.version}</version>
                <executions>
                    <execution>
                        <id>str-reverse</id>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <!--
                                Notes:
                                  * All paths are relative to ${project.basedir}
                                  * Spacing around double dashes to satisfy the XML parser.
                            -->

                            <!--
                                The path to the Rust crate we want to build (which will contain a Cargo.toml).
                            -->
                            <path>src/main/rust/str-reverse</path>

                            <!--
                                Passes `- - release` to `cargo build` to create a release build.

                                The default is to just call `cargo build` producing a debug build.
                                Many of the other `cargo build` options are also supported.
                                E.g. ` - - features` and ` - - no-default-features`.


                            -->
                            <release>true</release>

                            <!--
                                Always build test code.
                                Passes ` - - tests` to `cargo build`.
                            -->
                            <tests>true</tests>

                            <!--
                                Copy the generated binaries to the resources dir after a successful build.
                                We use this path because it will be bundled automatically into the final jar.
                            -->
                            <copyTo>src/main/resources/io/questdb/rust/maven/example/libs</copyTo>

                            <!--
                                Further nest copy into a subdirectory named through the following expression:
                                (System.getProperty("os.name") + "_" + System.getProperty("os.arch")).toLowerCase();
                            -->
                            <copyWithPlatformDir>true</copyWithPlatformDir>

                            <environmentVariables>
                                <REVERSED_STR_PREFIX>Great scott! A reversed string!</REVERSED_STR_PREFIX>
                            </environmentVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
            The "clean" plugin is configured to remove the generated binaries from the "resources" dir.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>src/main/resources/io/questdb/rust/maven/example/libs</directory>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>